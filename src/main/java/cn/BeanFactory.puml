@startuml
class DefaultListableBeanFactory{
}
class SimpleAliasRegistry{
    -{final} Map<String, String> aliasMap = new ConcurrentHashMap<>(16)
     +void registerAlias(String name, String alias)
     + boolean hasAlias(String name, String alias)
     + void removeAlias(String alias)
     + boolean isAlias(String name)
     + String[] getAliases(String name)
     + void resolveAliases(StringValueResolver valueResolver)
     + String canonicalName(String name)
       boolean allowAliasOverriding()
       void checkForAliasCircle(String name, String alias)
     - void retrieveAliases(String name, List<String> result)
}
class DefaultSingletonBeanRegistry{
   -{final}  Map<String, Object> singletonObjects
   -{final}  Map<String, ObjectFactory<?>> singletonFactories
   -{final}  Map<String, Object> earlySingletonObjects
   -{final}  Set<String> registeredSingletons
   -{final}  Set<String> singletonsCurrentlyInCreation
   -{final}  Set<String> inCreationCheckExclusions
   -{final}  Set<Exception> suppressedExceptions
   -{final}  boolean singletonsCurrentlyInDestruction
   -{final}  Map<String, Object> disposableBeans
   -{final}  Map<String, Set<String>> containedBeanMap
   -{final}  Map<String, Set<String>> dependentBeanMap
   -{final}  Map<String, Set<String>> dependenciesForBeanMap
   + void registerSingleton(String beanName, Object singletonObject) throws IllegalStateException
   + Object getSingleton(String beanName)
   + boolean containsSingleton(String beanName)
   + void setCurrentlyInCreation(String beanName, boolean inCreation)
   + boolean isCurrentlyInCreation(String beanName)
   + boolean isSingletonCurrentlyInCreation(String beanName)
   + void registerDisposableBean(String beanName, DisposableBean bean)
   + void registerContainedBean(String containedBeanName, String containingBeanName)
   + void registerDependentBean(String beanName, String dependentBeanName)
   + String[] getDependentBeans(String beanName)
   + String[] getDependenciesForBean(String beanName)
   + void destroySingletons()
   + void destroySingleton(String beanName)
   + {final}   Object getSingletonMutex()
     void addSingleton(String beanName, Object singletonObject)
     void addSingletonFactory(String beanName, ObjectFactory<?> singletonFactory)
     Object getSingleton(String beanName, boolean allowEarlyReference)
     Object getSingleton(String beanName, ObjectFactory<?> singletonFactory)
     void onSuppressedException(Exception ex)
     void removeSingleton(String beanName)
     String[] getSingletonNames()
     int getSingletonCount()
     boolean isActuallyInCreation(String beanName)
     void beforeSingletonCreation(String beanName)
     void afterSingletonCreation(String beanName)
     boolean isDependent(String beanName, String dependentBeanName)
     boolean hasDependentBean(String beanName)
     void clearSingletonCache()
     void destroyBean(String beanName, @Nullable DisposableBean bean)
   - boolean isDependent(String beanName, String dependentBeanName, @Nullable Set<String> alreadySeen)
}
abstract class FactoryBeanRegistrySupport{
    -{final} Map<String, Object> factoryBeanObjectCache
    Class<?> getTypeForFactoryBean(final FactoryBean<?> factoryBean)
    Object getCachedObjectForFactoryBean(String beanName)
    Object getObjectFromFactoryBean(FactoryBean<?> factory, String beanName, boolean shouldPostProcess)
    Object doGetObjectFromFactoryBean(final FactoryBean<?> factory, final String beanName) throws BeanCreationException
    Object postProcessObjectFromFactoryBean(Object object, String beanName) throws BeansException
    FactoryBean<?> getFactoryBean(String beanName, Object beanInstance) throws BeansException
    void removeSingleton(String beanName)
    void clearSingletonCache()
    AccessControlContext getAccessControlContext()
}
abstract class AbstractAutowireCapableBeanFactory{
    - InstantiationStrategy instantiationStrategy
    - ParameterNameDiscoverer parameterNameDiscoverer
    - boolean allowCircularReferences
    - boolean allowRawInjectionDespiteWrapping
    - {final} Set<Class<?>> ignoredDependencyTypes
    - {final} Set<Class<?>> ignoredDependencyInterfaces
    - {final} NamedThreadLocal<String> currentlyCreatedBean
    - {final} ConcurrentMap<String, BeanWrapper> factoryBeanInstanceCache
    - {final} ConcurrentMap<Class<?>, Method[]> factoryMethodCandidateCache
    - {final} ConcurrentMap<Class<?>, PropertyDescriptor[]> filteredPropertyDescriptorsCache
    + void setInstantiationStrategy(InstantiationStrategy instantiationStrategy)
      InstantiationStrategy getInstantiationStrategy()
    + void setParameterNameDiscoverer(@Nullable ParameterNameDiscoverer parameterNameDiscoverer)
      ParameterNameDiscoverer getParameterNameDiscoverer()
    + void setAllowCircularReferences(boolean allowCircularReferences)
    + void setAllowRawInjectionDespiteWrapping(boolean allowRawInjectionDespiteWrapping)
    + void ignoreDependencyType(Class<?> type)
    + void ignoreDependencyInterface(Class<?> ifc)
    + void copyConfigurationFrom(ConfigurableBeanFactory otherFactory)
 	// Typical methods for creating and populating external bean instances
    +  <T> T createBean(Class<T> beanClass) throws BeansException
    + void autowireBean(Object existingBean)
    + Object configureBean(Object existingBean, String beanName) throws BeansException
	// Specialized methods for fine-grained control over the bean lifecycle
    + Object createBean(Class<?> beanClass, int autowireMode, boolean dependencyCheck) throws BeansException
    + Object autowire(Class<?> beanClass, int autowireMode, boolean dependencyCheck) throws BeansException
    + void autowireBeanProperties(Object existingBean, int autowireMode, boolean dependencyCheck) throws BeansException
    + void applyBeanPropertyValues(Object existingBean, String beanName) throws BeansException
    + Object initializeBean(Object existingBean, String beanName)
    + Object applyBeanPostProcessorsBeforeInitialization(Object existingBean, String beanName) throws BeansException
    + Object applyBeanPostProcessorsAfterInitialization(Object existingBean, String beanName) throws BeansException
    + void destroyBean(Object existingBean)
    // Delegate methods for resolving injection points
    + Object resolveBeanByName(String name, DependencyDescriptor descriptor)
    + Object resolveDependency(DependencyDescriptor descriptor, @Nullable String requestingBeanName) throws BeansException
      Object createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args) throws BeanCreationException
      Object doCreateBean(final String beanName, final RootBeanDefinition mbd, final @Nullable Object[] args) throws BeanCreationException
      Class<?> predictBeanType(String beanName, RootBeanDefinition mbd, Class<?>... typesToMatch)
      Class<?> determineTargetType(String beanName, RootBeanDefinition mbd, Class<?>... typesToMatch)
      Class<?> getTypeForFactoryMethod(String beanName, RootBeanDefinition mbd, Class<?>... typesToMatch)
      Class<?> getTypeForFactoryBean(String beanName, RootBeanDefinition mbd)
    - Class<?> getTypeForFactoryBeanFromMethod(Class<?> beanClass, final String factoryMethodName)
      Object getEarlyBeanReference(String beanName, RootBeanDefinition mbd, Object bean)
    - FactoryBean<?> getSingletonFactoryBeanForTypeCheck(String beanName, RootBeanDefinition mbd)
    - FactoryBean<?> getNonSingletonFactoryBeanForTypeCheck(String beanName, RootBeanDefinition mbd)
      void applyMergedBeanDefinitionPostProcessors(RootBeanDefinition mbd, Class<?> beanType, String beanName)
      Object resolveBeforeInstantiation(String beanName, RootBeanDefinition mbd)
      Object applyBeanPostProcessorsBeforeInstantiation(Class<?> beanClass, String beanName)
      BeanWrapper createBeanInstance(String beanName, RootBeanDefinition mbd, @Nullable Object[] args)
      BeanWrapper obtainFromSupplier(Supplier<?> instanceSupplier, String beanName)
      Object getObjectForBeanInstance( Object beanInstance, String name, String beanName, @Nullable RootBeanDefinition mbd)
      Constructor<?>[] determineConstructorsFromBeanPostProcessors(@Nullable Class<?> beanClass, String beanName) throws BeansException
      BeanWrapper instantiateBean(final String beanName, final RootBeanDefinition mbd)
      BeanWrapper instantiateUsingFactoryMethod( String beanName, RootBeanDefinition mbd, @Nullable Object[] explicitArgs)
      BeanWrapper autowireConstructor( String beanName, RootBeanDefinition mbd, @Nullable Constructor<?>[] ctors, @Nullable Object[] explicitArgs)
      populateBean(String beanName, RootBeanDefinition mbd, @Nullable BeanWrapper bw)
      autowireByName( String beanName, AbstractBeanDefinition mbd, BeanWrapper bw, MutablePropertyValues pvs)
      autowireByType( String beanName, AbstractBeanDefinition mbd, BeanWrapper bw, MutablePropertyValues pvs)
      String[] unsatisfiedNonSimpleProperties(AbstractBeanDefinition mbd, BeanWrapper bw)
      PropertyDescriptor[] filterPropertyDescriptorsForDependencyCheck(BeanWrapper bw, boolean cache)
      PropertyDescriptor[] filterPropertyDescriptorsForDependencyCheck(BeanWrapper bw)
      boolean isExcludedFromDependencyCheck(PropertyDescriptor pd)
      void checkDependencies( String beanName, AbstractBeanDefinition mbd, PropertyDescriptor[] pds, @Nullable PropertyValues pvs) throws UnsatisfiedDependencyException
      void applyPropertyValues(String beanName, BeanDefinition mbd, BeanWrapper bw, PropertyValues pvs)
      convertForProperty( @Nullable Object value, String propertyName, BeanWrapper bw, TypeConverter converter)
      Object initializeBean(final String beanName, final Object bean, @Nullable RootBeanDefinition mbd)
    + void invokeAwareMethods(final String beanName, final Object bean)
      void invokeInitMethods(String beanName, final Object bean, @Nullable RootBeanDefinition mbd) throws Throwable
      void invokeCustomInitMethod(String beanName, final Object bean, RootBeanDefinition mbd) throws Throwable
      Object postProcessObjectFromFactoryBean(Object object, String beanName)
      void removeSingleton(String beanName)
      void clearSingletonCache()

}
abstract class AbstractBeanFactory{
    - BeanFactory parentBeanFactory
    - ClassLoader beanClassLoader
    - ClassLoader tempClassLoader
    - boolean cacheBeanMetadata
    - BeanExpressionResolver beanExpressionResolver
    - ConversionService conversionService
    - {final} Set<PropertyEditorRegistrar> propertyEditorRegistrars
    - {final}  Map<Class<?>, Class<? extends PropertyEditor>> customEditors
    - TypeConverter typeConverter
    - List<StringValueResolver> embeddedValueResolvers
    - List<BeanPostProcessor> beanPostProcessors
    - {volatile} boolean hasInstantiationAwareBeanPostProcessors
    - {volatile} boolean hasDestructionAwareBeanPostProcessors
    - {final} Map<String, Scope> scopes
    - SecurityContextProvider securityContextProvider
    - {final} Map<String, RootBeanDefinition> mergedBeanDefinitions
    - {final} Set<String> alreadyCreated
    - {final} ThreadLocal<Object> prototypesCurrentlyInCreation
    + Object getBean(String name) throws BeansException
    + <T> T getBean(String name, Class<T> requiredType) throws BeansException
    + Object getBean(String name, Object... args) throws BeansException
    + <T> T getBean(String name, @Nullable Class<T> requiredType, @Nullable Object... args) throws BeansException
      <T> T doGetBean(final String name, @Nullable final Class<T> requiredType,@Nullable final Object[] args, boolean typeCheckOnly) throws BeansException
    + boolean containsBean(String name)
    + boolean isSingleton(String name) throws NoSuchBeanDefinitionException
    + boolean isPrototype(String name) throws NoSuchBeanDefinitionException
    + boolean isTypeMatch(String name, ResolvableType typeToMatch) throws NoSuchBeanDefinitionException
    + boolean isTypeMatch(String name, Class<?> typeToMatch) throws NoSuchBeanDefinitionException
    + Class<?> getType(String name) throws NoSuchBeanDefinitionException
    + String[] getAliases(String name)
    + BeanFactory getParentBeanFactory()
    + boolean containsLocalBean(String name)
    + void setParentBeanFactory(@Nullable BeanFactory parentBeanFactory)
    + void setBeanClassLoader(@Nullable ClassLoader beanClassLoader)
    + ClassLoader getBeanClassLoader()
    + void setTempClassLoader(@Nullable ClassLoader tempClassLoader)
    + ClassLoader getTempClassLoader()
    + void setCacheBeanMetadata(boolean cacheBeanMetadata)
    + boolean isCacheBeanMetadata()
    + void setBeanExpressionResolver(@Nullable BeanExpressionResolver resolver)
    + BeanExpressionResolver getBeanExpressionResolver()
    + void setConversionService(@Nullable ConversionService conversionService)
    + ConversionService getConversionService()
    + void addPropertyEditorRegistrar(PropertyEditorRegistrar registrar)
    + Set<PropertyEditorRegistrar> getPropertyEditorRegistrars()
    + void registerCustomEditor(Class<?> requiredType, Class<? extends PropertyEditor> propertyEditorClass)
    + void copyRegisteredEditorsTo(PropertyEditorRegistry registry)
    + Map<Class<?>, Class<? extends PropertyEditor>> getCustomEditors()
    + void setTypeConverter(TypeConverter typeConverter)
      TypeConverter getCustomTypeConverter()
    + TypeConverter getTypeConverter()
    + void addEmbeddedValueResolver(StringValueResolver valueResolver)
    + boolean hasEmbeddedValueResolver()
    + String resolveEmbeddedValue(@Nullable String value)
    + void addBeanPostProcessor(BeanPostProcessor beanPostProcessor)
    + int getBeanPostProcessorCount()
      List<BeanPostProcessor> getBeanPostProcessors()
      boolean hasInstantiationAwareBeanPostProcessors()
      boolean hasDestructionAwareBeanPostProcessors()
    + void registerScope(String scopeName, Scope scope)
    + String[] getRegisteredScopeNames()
    + Scope getRegisteredScope(String scopeName)
    + void setSecurityContextProvider(SecurityContextProvider securityProvider)
    + AccessControlContext getAccessControlContext()
    + void copyConfigurationFrom(ConfigurableBeanFactory otherFactory)
    + BeanDefinition getMergedBeanDefinition(String name) throws BeansException
      boolean isFactoryBean(String name) throws NoSuchBeanDefinitionException
      boolean isActuallyInCreation(String beanName
      boolean isPrototypeCurrentlyInCreation(String beanName)
      void beforePrototypeCreation(String beanName)
      void afterPrototypeCreation(String beanName)
    + void destroyBean(String beanName, Object beanInstance)
      void destroyBean(String beanName, Object bean, RootBeanDefinition mbd)
    + void destroyScopedBean(String beanName)
      String transformedBeanName(String name)
      String originalBeanName(String name)
      void initBeanWrapper(BeanWrapper bw)
      void registerCustomEditors(PropertyEditorRegistry registry)
      RootBeanDefinition getMergedLocalBeanDefinition(String beanName) throws BeansException
      RootBeanDefinition getMergedBeanDefinition(String beanName, BeanDefinition bd) throws BeanDefinitionStoreException
      RootBeanDefinition getMergedBeanDefinition(String beanName, BeanDefinition bd, @Nullable BeanDefinition containingBd) throws BeanDefinitionStoreException
      void checkMergedBeanDefinition(RootBeanDefinition mbd, String beanName, @Nullable Object[] args) throws BeanDefinitionStoreException
      void clearMergedBeanDefinition(String beanName)
      void clearMetadataCache()
      Class<?> resolveBeanClass(final RootBeanDefinition mbd, String beanName, final Class<?>... typesToMatch) throws CannotLoadBeanClassException
      Class<?> doResolveBeanClass(RootBeanDefinition mbd, Class<?>... typesToMatch) throws ClassNotFoundException
      Object evaluateBeanDefinitionString(@Nullable String value, @Nullable BeanDefinition beanDefinition)
      Class<?> predictBeanType(String beanName, RootBeanDefinition mbd, Class<?>... typesToMatch)
      boolean isFactoryBean(String beanName, RootBeanDefinition mbd)
      Class<?> getTypeForFactoryBean(String beanName, RootBeanDefinition mbd)
      void markBeanAsCreated(String beanName)
      void cleanupAfterBeanCreationFailure(String beanName)
      boolean isBeanEligibleForMetadataCaching(String beanName)
      boolean removeSingletonIfCreatedForTypeCheckOnly(String beanName)
      boolean hasBeanCreationStarted()
      Object getObjectForBeanInstance( Object beanInstance, String name, String beanName, @Nullable RootBeanDefinition mbd)
    + boolean isBeanNameInUse(String beanName)
      boolean requiresDestruction(Object bean, RootBeanDefinition mbd)
      void registerDisposableBeanIfNecessary(String beanName, Object bean, RootBeanDefinition mbd)
      abstract boolean containsBeanDefinition(String beanName)
      abstract BeanDefinition getBeanDefinition(String beanName) throws BeansException
      abstract Object createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args) throws BeanCreationException
}
interface ConfigurableListableBeanFactory{
    void ignoreDependencyType(Class<?> type)
    void ignoreDependencyInterface(Class<?> ifc)
    void registerResolvableDependency(Class<?> dependencyType, @Nullable Object autowiredValue)
    boolean isAutowireCandidate(String beanName, DependencyDescriptor descriptor)throws NoSuchBeanDefinitionException
    BeanDefinition getBeanDefinition(String beanName) throws NoSuchBeanDefinitionException
    Iterator<String> getBeanNamesIterator()
    void clearMetadataCache()
    void freezeConfiguration()
    boolean isConfigurationFrozen()
    void preInstantiateSingletons() throws BeansException
}
interface ConfigurableBeanFactory{
    String SCOPE_SINGLETON
    String SCOPE_PROTOTYPE
    void setParentBeanFactory(BeanFactory parentBeanFactory) throws IllegalStateException
    void setBeanClassLoader(@Nullable ClassLoader beanClassLoader)
    ClassLoader getBeanClassLoader()
    void setTempClassLoader(@Nullable ClassLoader tempClassLoader)
    ClassLoader getTempClassLoader()
    void setCacheBeanMetadata(boolean cacheBeanMetadata)
    boolean isCacheBeanMetadata()
    void setBeanExpressionResolver(@Nullable BeanExpressionResolver resolver)
    BeanExpressionResolver getBeanExpressionResolver()
    void setConversionService(@Nullable ConversionService conversionService)
    ConversionService getConversionService()
    void addPropertyEditorRegistrar(PropertyEditorRegistrar registrar)
    void registerCustomEditor(Class<?> requiredType, Class<? extends PropertyEditor> propertyEditorClass)
    void copyRegisteredEditorsTo(PropertyEditorRegistry registry)
    void setTypeConverter(TypeConverter typeConverter)
    TypeConverter getTypeConverter()
    void addEmbeddedValueResolver(StringValueResolver valueResolver)
    boolean hasEmbeddedValueResolver()
    String resolveEmbeddedValue(String value)
    void addBeanPostProcessor(BeanPostProcessor beanPostProcessor)
    int getBeanPostProcessorCount()
    void registerScope(String scopeName, Scope scope)
    String[] getRegisteredScopeNames()
    Scope getRegisteredScope(String scopeName)
    void copyConfigurationFrom(ConfigurableBeanFactory otherFactory)
    void registerAlias(String beanName, String alias) throws BeanDefinitionStoreException
    void resolveAliases(StringValueResolver valueResolver)
    BeanDefinition getMergedBeanDefinition(String beanName) throws NoSuchBeanDefinitionException
    boolean isFactoryBean(String name) throws NoSuchBeanDefinitionException
    void setCurrentlyInCreation(String beanName, boolean inCreation)
    boolean isCurrentlyInCreation(String beanName)
    void registerDependentBean(String beanName, String dependentBeanName)
    String[] getDependentBeans(String beanName)
    String[] getDependenciesForBean(String beanName)
    void destroyBean(String beanName, Object beanInstance)
    void destroyScopedBean(String beanName)
    void destroySingletons()
}
interface SingletonBeanRegistry{
    void registerSingleton(String beanName, Object singletonObject)
    Object getSingleton(String beanName)
    boolean containsSingleton(String beanName)
    String[] getSingletonNames()
    int getSingletonCount()
    Object getSingletonMutex()
}
interface HierarchicalBeanFactory{
    BeanFactory getParentBeanFactory()
    boolean containsLocalBean(String name)
}
interface AutowireCapableBeanFactory{
   int AUTOWIRE_NO
   int AUTOWIRE_BY_NAME
   int AUTOWIRE_BY_TYPE
   int AUTOWIRE_CONSTRUCTOR
   int AUTOWIRE_AUTODETECT
   String ORIGINAL_INSTANCE_SUFFIX
   //Typical methods for creating and populating external bean instances
   <T> T createBean(Class<T> beanClass) throws BeansException
   void autowireBean(Object existingBean) throws BeansException
   Object configureBean(Object existingBean, String beanName) throws BeansException
   //Specialized methods for fine-grained control over the bean lifecycle
   Object createBean(Class<?> beanClass, int autowireMode, boolean dependencyCheck) throws BeansException
   Object autowire(Class<?> beanClass, int autowireMode, boolean dependencyCheck) throws BeansException
   void autowireBeanProperties(Object existingBean, int autowireMode, boolean dependencyCheck)throws BeansException
   void applyBeanPropertyValues(Object existingBean, String beanName) throws BeansException
   Object initializeBean(Object existingBean, String beanName) throws BeansException
   Object applyBeanPostProcessorsBeforeInitialization(Object existingBean, String beanName)throws BeansException
   Object applyBeanPostProcessorsAfterInitialization(Object existingBean, String beanName)throws BeansException
   void destroyBean(Object existingBean)
   //Delegate methods for resolving injection points
   <T> NamedBeanHolder<T> resolveNamedBean(Class<T> requiredType) throws BeansException
   Object resolveBeanByName(String name, DependencyDescriptor descriptor) throws BeansException
   Object resolveDependency(DependencyDescriptor descriptor, @Nullable String requestingBeanName) throws BeansException
   Object resolveDependency(DependencyDescriptor descriptor, @Nullable String requestingBeanName,@Nullable Set<String> autowiredBeanNames, @Nullable TypeConverter typeConverter) throws BeansException
}
SimpleAliasRegistry ..|>AliasRegistry
DefaultSingletonBeanRegistry --|>SimpleAliasRegistry
DefaultSingletonBeanRegistry ..|>SingletonBeanRegistry
FactoryBeanRegistrySupport --|>DefaultSingletonBeanRegistry
AbstractBeanFactory --|>FactoryBeanRegistrySupport
AbstractBeanFactory ..|>ConfigurableBeanFactory
AbstractAutowireCapableBeanFactory ..|>AutowireCapableBeanFactory
AutowireCapableBeanFactory --|>BeanFactory
DefaultListableBeanFactory --|>AbstractAutowireCapableBeanFactory
DefaultListableBeanFactory ..|>BeanDefinitionRegistry
DefaultListableBeanFactory ..|>ConfigurableListableBeanFactory
ConfigurableListableBeanFactory --|>ConfigurableBeanFactory
ConfigurableBeanFactory --|>HierarchicalBeanFactory
ConfigurableBeanFactory --|> SingletonBeanRegistry
ConfigurableBeanFactory <..o ClassLoader
ConfigurableBeanFactory <..o BeanExpressionResolver
ConfigurableBeanFactory <..o ConversionService
ConfigurableBeanFactory <..o PropertyEditorRegistrar
ConfigurableBeanFactory <..o PropertyEditor
ConfigurableBeanFactory <..o PropertyEditorRegistry
ConfigurableBeanFactory <..o TypeConverter
ConfigurableBeanFactory <..o StringValueResolver
ConfigurableBeanFactory <..o BeanPostProcessor
ConfigurableBeanFactory <..o Scope
ConfigurableBeanFactory <..o AccessControlContext
ConfigurableBeanFactory <..o BeanDefinition
AbstractBeanFactory <--o BeanFactory
AbstractBeanFactory <--o BeanExpressionResolver
AbstractBeanFactory <--o ConversionService
AbstractBeanFactory <..o PropertyEditorRegistrar
AbstractBeanFactory <..o TypeConverter
AbstractBeanFactory <..o BeanPostProcessor
AbstractBeanFactory <--o Scope
AbstractBeanFactory <..o BeanDefinition
AbstractBeanFactory <--o RootBeanDefinition
AbstractBeanFactory <--o FactoryBean
AbstractBeanFactory <..o BeanFactoryUtils
AbstractBeanFactory <..o ClassLoader
AbstractBeanFactory <..o InstantiationAwareBeanPostProcessor
AbstractBeanFactory <..o DestructionAwareBeanPostProcessor
AbstractBeanFactory <..o BeanWrapper
AbstractAutowireCapableBeanFactory <..o InstantiationStrategy
AbstractAutowireCapableBeanFactory <..o ParameterNameDiscoverer
AbstractAutowireCapableBeanFactory <--o RootBeanDefinition
AbstractAutowireCapableBeanFactory <--o BeanWrapper
AbstractAutowireCapableBeanFactory <--o BeanPostProcessor
AbstractAutowireCapableBeanFactory <..o DisposableBeanAdapter
AbstractAutowireCapableBeanFactory <..o ConstructorResolver
AbstractAutowireCapableBeanFactory <..o SmartInstantiationAwareBeanPostProcessor
AbstractAutowireCapableBeanFactory <..o ClassUtils
AbstractAutowireCapableBeanFactory <..o ConstructorArgumentValues
AbstractAutowireCapableBeanFactory <..o ConstructorArgumentValues.ValueHolder
AbstractAutowireCapableBeanFactory <..o ConstructorArgumentValues.AutowireUtils
AbstractAutowireCapableBeanFactory <..o GenericTypeResolver
AbstractAutowireCapableBeanFactory <..o ReflectionUtils
AbstractAutowireCapableBeanFactory <..o MergedBeanDefinitionPostProcessor
AbstractAutowireCapableBeanFactory <..o InstantiationAwareBeanPostProcessor
AbstractAutowireCapableBeanFactory <..o PropertyDescriptor
AbstractAutowireCapableBeanFactory <..o MutablePropertyValues
AbstractAutowireCapableBeanFactory <..o TypeConverter
AbstractAutowireCapableBeanFactory <..o PropertyAccessorUtils
AbstractAutowireCapableBeanFactory <..o BeanUtils
@enduml