@startuml
class DefaultListableBeanFactory{
}
class SimpleAliasRegistry{
    -{final} Map<String, String> aliasMap = new ConcurrentHashMap<>(16)
     +void registerAlias(String name, String alias)
     + boolean hasAlias(String name, String alias)
     + void removeAlias(String alias)
     + boolean isAlias(String name)
     + String[] getAliases(String name)
     + void resolveAliases(StringValueResolver valueResolver)
     + String canonicalName(String name)
       boolean allowAliasOverriding()
       void checkForAliasCircle(String name, String alias)
     - void retrieveAliases(String name, List<String> result)

}
class DefaultSingletonBeanRegistry{
}
abstract class FactoryBeanRegistrySupport{
}
abstract class AbstractAutowireCapableBeanFactory{
}
abstract class AbstractBeanFactory{
}
interface ConfigurableListableBeanFactory{
    void ignoreDependencyType(Class<?> type)
    void ignoreDependencyInterface(Class<?> ifc)
    void registerResolvableDependency(Class<?> dependencyType, @Nullable Object autowiredValue)
    boolean isAutowireCandidate(String beanName, DependencyDescriptor descriptor)throws NoSuchBeanDefinitionException
    BeanDefinition getBeanDefinition(String beanName) throws NoSuchBeanDefinitionException
    Iterator<String> getBeanNamesIterator()
    void clearMetadataCache()
    void freezeConfiguration()
    boolean isConfigurationFrozen()
    void preInstantiateSingletons() throws BeansException
}
interface ConfigurableBeanFactory{
    String SCOPE_SINGLETON
    String SCOPE_PROTOTYPE
    void setParentBeanFactory(BeanFactory parentBeanFactory) throws IllegalStateException
    void setBeanClassLoader(@Nullable ClassLoader beanClassLoader)
    ClassLoader getBeanClassLoader()
    void setTempClassLoader(@Nullable ClassLoader tempClassLoader)
    ClassLoader getTempClassLoader()
    void setCacheBeanMetadata(boolean cacheBeanMetadata)
    boolean isCacheBeanMetadata()
    void setBeanExpressionResolver(@Nullable BeanExpressionResolver resolver)
    BeanExpressionResolver getBeanExpressionResolver()
    void setConversionService(@Nullable ConversionService conversionService)
    ConversionService getConversionService()
    void addPropertyEditorRegistrar(PropertyEditorRegistrar registrar)
    void registerCustomEditor(Class<?> requiredType, Class<? extends PropertyEditor> propertyEditorClass)
    void copyRegisteredEditorsTo(PropertyEditorRegistry registry)
    void setTypeConverter(TypeConverter typeConverter)
    TypeConverter getTypeConverter()
    void addEmbeddedValueResolver(StringValueResolver valueResolver)
    boolean hasEmbeddedValueResolver()
    String resolveEmbeddedValue(String value)
    void addBeanPostProcessor(BeanPostProcessor beanPostProcessor)
    int getBeanPostProcessorCount()
    void registerScope(String scopeName, Scope scope)
    String[] getRegisteredScopeNames()
    Scope getRegisteredScope(String scopeName)
    void copyConfigurationFrom(ConfigurableBeanFactory otherFactory)
    void registerAlias(String beanName, String alias) throws BeanDefinitionStoreException
    void resolveAliases(StringValueResolver valueResolver)
    BeanDefinition getMergedBeanDefinition(String beanName) throws NoSuchBeanDefinitionException
    boolean isFactoryBean(String name) throws NoSuchBeanDefinitionException
    void setCurrentlyInCreation(String beanName, boolean inCreation)
    boolean isCurrentlyInCreation(String beanName)
    void registerDependentBean(String beanName, String dependentBeanName)
    String[] getDependentBeans(String beanName)
    String[] getDependenciesForBean(String beanName)
    void destroyBean(String beanName, Object beanInstance)
    void destroyScopedBean(String beanName)
    void destroySingletons()
}
interface SingletonBeanRegistry{
    void registerSingleton(String beanName, Object singletonObject)
    Object getSingleton(String beanName)
    boolean containsSingleton(String beanName)
    String[] getSingletonNames()
    int getSingletonCount()
    Object getSingletonMutex()
}
interface HierarchicalBeanFactory{
    BeanFactory getParentBeanFactory()
    boolean containsLocalBean(String name)
}
interface AutowireCapableBeanFactory{
   int AUTOWIRE_NO
   int AUTOWIRE_BY_NAME
   int AUTOWIRE_BY_TYPE
   int AUTOWIRE_CONSTRUCTOR
   int AUTOWIRE_AUTODETECT
   String ORIGINAL_INSTANCE_SUFFIX
   //Typical methods for creating and populating external bean instances
   <T> T createBean(Class<T> beanClass) throws BeansException
   void autowireBean(Object existingBean) throws BeansException
   Object configureBean(Object existingBean, String beanName) throws BeansException
   //Specialized methods for fine-grained control over the bean lifecycle
   Object createBean(Class<?> beanClass, int autowireMode, boolean dependencyCheck) throws BeansException
   Object autowire(Class<?> beanClass, int autowireMode, boolean dependencyCheck) throws BeansException
   void autowireBeanProperties(Object existingBean, int autowireMode, boolean dependencyCheck)throws BeansException
   void applyBeanPropertyValues(Object existingBean, String beanName) throws BeansException
   Object initializeBean(Object existingBean, String beanName) throws BeansException
   Object applyBeanPostProcessorsBeforeInitialization(Object existingBean, String beanName)throws BeansException
   Object applyBeanPostProcessorsAfterInitialization(Object existingBean, String beanName)throws BeansException
   void destroyBean(Object existingBean)
   //Delegate methods for resolving injection points
   <T> NamedBeanHolder<T> resolveNamedBean(Class<T> requiredType) throws BeansException
   Object resolveBeanByName(String name, DependencyDescriptor descriptor) throws BeansException
   Object resolveDependency(DependencyDescriptor descriptor, @Nullable String requestingBeanName) throws BeansException
   Object resolveDependency(DependencyDescriptor descriptor, @Nullable String requestingBeanName,@Nullable Set<String> autowiredBeanNames, @Nullable TypeConverter typeConverter) throws BeansException
}
SimpleAliasRegistry ..|>AliasRegistry
DefaultSingletonBeanRegistry --|>SimpleAliasRegistry
DefaultSingletonBeanRegistry ..|>SingletonBeanRegistry
FactoryBeanRegistrySupport --|>DefaultSingletonBeanRegistry
AbstractBeanFactory --|>FactoryBeanRegistrySupport
AbstractBeanFactory ..|>ConfigurableBeanFactory
AbstractAutowireCapableBeanFactory ..|>AutowireCapableBeanFactory
AutowireCapableBeanFactory --|>BeanFactory
DefaultListableBeanFactory --|>AbstractAutowireCapableBeanFactory
DefaultListableBeanFactory ..|>BeanDefinitionRegistry
DefaultListableBeanFactory ..|>ConfigurableListableBeanFactory
ConfigurableListableBeanFactory --|>ConfigurableBeanFactory
ConfigurableBeanFactory --|>HierarchicalBeanFactory
ConfigurableBeanFactory --|> SingletonBeanRegistry
ConfigurableBeanFactory <..o ClassLoader
ConfigurableBeanFactory <..o BeanExpressionResolver
ConfigurableBeanFactory <..o ConversionService
ConfigurableBeanFactory <..o PropertyEditorRegistrar
ConfigurableBeanFactory <..o PropertyEditor
ConfigurableBeanFactory <..o PropertyEditorRegistry
ConfigurableBeanFactory <..o TypeConverter
ConfigurableBeanFactory <..o StringValueResolver
ConfigurableBeanFactory <..o BeanPostProcessor
ConfigurableBeanFactory <..o Scope
ConfigurableBeanFactory <..o AccessControlContext
ConfigurableBeanFactory <..o BeanDefinition
@enduml