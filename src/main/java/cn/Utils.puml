@startuml
abstract class ReflectionUtils{
   + {static,final}   MethodFilter NON_BRIDGED_METHODS
   + {static,final}   MethodFilter USER_DECLARED_METHODS
   + {static,final}   FieldFilter COPYABLE_FIELDS
   - {static,final}   String CGLIB_RENAMED_METHOD_PREFIX
   - {static,final}   Method[] NO_METHODS
   - {static,final}   Field[] NO_FIELDS
   - {static,final}   Map<Class<?>, Method[]> declaredMethodsCache
   - {static,final}   Map<Class<?>, Field[]> declaredFieldsCache
   + {static}  Field findField(Class<?> clazz, String name)
   + Field findField(Class<?> clazz, @Nullable String name, @Nullable Class<?> type)
   + void setField(Field field, @Nullable Object target, @Nullable Object value)
   + Object getField(Field field, @Nullable Object target)
   + Method findMethod(Class<?> clazz, String name)
   + Method findMethod(Class<?> clazz, String name, @Nullable Class<?>... paramTypes)
   + Object invokeMethod(Method method, @Nullable Object target)
   + Object invokeMethod(Method method, @Nullable Object target, @Nullable Object... args)
   + Object invokeJdbcMethod(Method method, @Nullable Object target) throws SQLException
   + Object invokeJdbcMethod(Method method, @Nullable Object target, @Nullable Object... args) throws SQLException
   + void handleReflectionException(Exception ex)
   + void handleInvocationTargetException(InvocationTargetException ex)
   + void rethrowRuntimeException(Throwable ex)
   + void rethrowException(Throwable ex) throws Exception
   + boolean declaresException(Method method, Class<?> exceptionType)
   + boolean isPublicStaticFinal(Field field)
   + boolean isEqualsMethod(@Nullable Method method)
   + boolean isHashCodeMethod(@Nullable Method method)
   + boolean isToStringMethod(@Nullable Method method)
   + boolean isObjectMethod(@Nullable Method method)
   + boolean isCglibRenamedMethod(Method renamedMethod)
   + void makeAccessible(Field field)
   + void makeAccessible(Method method)
   + void makeAccessible(Constructor<?> ctor)
   + <T> Constructor<T> accessibleConstructor(Class<T> clazz, Class<?>... parameterTypes) throws NoSuchMethodException
   + void doWithLocalMethods(Class<?> clazz, MethodCallback mc)
   + void doWithMethods(Class<?> clazz, MethodCallback mc)
   + void doWithMethods(Class<?> clazz, MethodCallback mc, @Nullable MethodFilter mf)
   + Method[] getAllDeclaredMethods(Class<?> leafClass)
   + Method[] getUniqueDeclaredMethods(Class<?> leafClass)
   + Method[] getDeclaredMethods(Class<?> clazz)
   + List<Method> findConcreteMethodsOnInterfaces(Class<?> clazz)
   + void doWithLocalFields(Class<?> clazz, FieldCallback fc)
   + void doWithFields(Class<?> clazz, FieldCallback fc)
   + void doWithFields(Class<?> clazz, FieldCallback fc, @Nullable FieldFilter ff)
   + Field[] getDeclaredFields(Class<?> clazz)
   + void shallowCopyFieldState(final Object src, final Object dest)
   + void clearCache()
}

abstract class PropertyAccessorUtils{
   + {static}  String getPropertyName(String propertyPath)
   + {static}  boolean isNestedOrIndexedProperty(@Nullable String propertyPath)
   + {static}  int getFirstNestedPropertySeparatorIndex(String propertyPath)
   + {static}  int getLastNestedPropertySeparatorIndex(String propertyPath)
   - {static}  int getNestedPropertySeparatorIndex(String propertyPath, boolean last)
   + {static}  boolean matchesProperty(String registeredPath, String propertyPath)
   + {static}  String canonicalPropertyName(@Nullable String propertyName)
   + {static}  String[] canonicalPropertyNames(@Nullable String[] propertyNames)
}
abstract class ClassUtils{
   + {static,final} String ARRAY_SUFFIX
   - {static,final} String INTERNAL_ARRAY_PREFIX
   - {static,final} String NON_PRIMITIVE_ARRAY_PREFIX
   - {static,final} char PACKAGE_SEPARATOR
   - {static,final} char PATH_SEPARATOR
   - {static,final} char INNER_CLASS_SEPARATOR
   + {static,final} String CGLIB_CLASS_SEPARATOR
   + {static,final} String CLASS_FILE_SUFFIX
   - {static,final} Map<Class<?>, Class<?>> primitiveWrapperTypeMap
   - {static,final} Map<Class<?>, Class<?>> primitiveTypeToWrapperMap
   - {static,final} Map<String, Class<?>> primitiveTypeNameMap
   - {static,final} Map<String, Class<?>> commonClassCache
   - {static,final} Set<Class<?>> javaLanguageInterfaces
   - {static,final} void registerCommonClasses(Class<?>... commonClasses)
   + ClassLoader getDefaultClassLoader()
   + ClassLoader overrideThreadContextClassLoader(@Nullable ClassLoader classLoaderToUse)
   + Class<?> forName(String name, @Nullable ClassLoader classLoader) throws ClassNotFoundException, LinkageError
   + Class<?> resolveClassName(String className, @Nullable ClassLoader classLoader) throws IllegalArgumentException
   + boolean isPresent(String className, @Nullable ClassLoader classLoader)
   + boolean isVisible(Class<?> clazz, @Nullable ClassLoader classLoader)
   + boolean isCacheSafe(Class<?> clazz, @Nullable ClassLoader classLoader)
   + boolean isLoadable(Class<?> clazz, ClassLoader classLoader)
   + Class<?> resolvePrimitiveClassName(@Nullable String name)
   + boolean isPrimitiveWrapper(Class<?> clazz)
   + boolean isPrimitiveOrWrapper(Class<?> clazz)
   + boolean isPrimitiveArray(Class<?> clazz)
   + boolean isPrimitiveWrapperArray(Class<?> clazz)
   + Class<?> resolvePrimitiveIfNecessary(Class<?> clazz)
   + boolean isAssignable(Class<?> lhsType, Class<?> rhsType)
   + boolean isAssignableValue(Class<?> type, @Nullable Object value)
   + String convertResourcePathToClassName(String resourcePath)
   + String convertClassNameToResourcePath(String className)
   + String addResourcePathToPackagePath(Class<?> clazz, String resourceName)
   + String classPackageAsResourcePath(@Nullable Class<?> clazz)
   + String classNamesToString(Class<?>... classes)
   + String classNamesToString(@Nullable Collection<Class<?>> classes)
   + Class<?>[] toClassArray(Collection<Class<?>> collection)
   + Class<?>[] getAllInterfaces(Object instance)
   + Class<?>[] getAllInterfacesForClass(Class<?> clazz)
   + Class<?>[] getAllInterfacesForClass(Class<?> clazz, @Nullable ClassLoader classLoader)
   + Set<Class<?>> getAllInterfacesAsSet(Object instance)
   + Set<Class<?>> getAllInterfacesForClassAsSet(Class<?> clazz)
   + Set<Class<?>> getAllInterfacesForClassAsSet(Class<?> clazz, @Nullable ClassLoader classLoader
   + Class<?> createCompositeInterface(Class<?>[] interfaces, @Nullable ClassLoader classLoader)
   + Class<?> determineCommonAncestor(@Nullable Class<?> clazz1, @Nullable Class<?> clazz2)
   + boolean isJavaLanguageInterface(Class<?> ifc)
   + boolean isInnerClass(Class<?> clazz)
   + boolean isCglibProxy(Object object)
   + boolean isCglibProxyClass(@Nullable Class<?> clazz)
   + boolean isCglibProxyClassName(@Nullable String className)
   + Class<?> getUserClass(Object instance)
   + String getDescriptiveType(@Nullable Object value)
   + boolean matchesTypeName(Class<?> clazz, @Nullable String typeName)
   + String getShortName(String className)
   + String getShortName(Class<?> clazz)
   + String getShortNameAsProperty(Class<?> clazz)
   + String getClassFileName(Class<?> clazz)
   + String getPackageName(Class<?> clazz)
   + String getPackageName(String fqClassName)
   + String getQualifiedName(Class<?> clazz)
   + String getQualifiedMethodName(Method method)
   + String getQualifiedMethodName(Method method, @Nullable Class<?> clazz)
   + boolean hasConstructor(Class<?> clazz, Class<?>... paramTypes)
   + <T> Constructor<T> getConstructorIfAvailable(Class<T> clazz, Class<?>... paramTypes)
   + boolean hasMethod(Class<?> clazz, String methodName, Class<?>... paramTypes)
   + Method getMethod(Class<?> clazz, String methodName, @Nullable Class<?>... paramTypes)
   + Method getMethodIfAvailable(Class<?> clazz, String methodName, @Nullable Class<?>... paramTypes)
   + int getMethodCountForName(Class<?> clazz, String methodName)
   + boolean hasAtLeastOneMethodWithName(Class<?> clazz, String methodName)
   + Method getMostSpecificMethod(Method method, @Nullable Class<?> targetClass)
   + Method getInterfaceMethodIfPossible(Method method)
   + boolean isUserLevelMethod(Method method)
   + boolean isGroovyObjectMethod(Method method)
   + boolean isOverridable(Method method, @Nullable Class<?> targetClass)
   + Method getStaticMethod(Class<?> clazz, String methodName, Class<?>... args)
}

class ConcurrentReferenceHashMap{
   - {static,final} int DEFAULT_INITIAL_CAPACITY
   - {static,final} float DEFAULT_LOAD_FACTOR
   - {static,final} int DEFAULT_CONCURRENCY_LEVEL
   - {static,final} ReferenceType DEFAULT_REFERENCE_TYPE
   - {static,final} int MAXIMUM_CONCURRENCY_LEVE
   - {final} Segment[] segments
   - {final} float loadFactor
   - {final} ReferenceType referenceType
   - {final} int shift
   - {volatile} Set<Map.Entry<K, V>> entrySet
     {final} float getLoadFactor()
     {final} int getSegmentsSize()
     {final} Segment getSegment(int index)
     ReferenceManager createReferenceManager()
     int getHash(@Nullable Object o)
   + V get(@Nullable Object key)
   + V getOrDefault(@Nullable Object key, @Nullable V defaultValue)
   + boolean containsKey(@Nullable Object key)
   - Entry<K, V> getEntryIfAvailable(@Nullable Object key)
     {final} Reference<K, V> getReference(@Nullable Object key, Restructure restructure)
   + V put(@Nullable K key, @Nullable V value)
   + V putIfAbsent(@Nullable K key, @Nullable V value)
   - V put(@Nullable final K key, @Nullable final V value, final boolean overwriteExisting
   - V remove(Object key)
   - boolean remove(Object key, final Object value)
   + boolean replace(K key, final V oldValue, final V newValue)
   + V replace(K key, final V value)
   + void clear()
   + void purgeUnreferencedEntries()
   + int size()
   + boolean isEmpty()
   + Set<Map.Entry<K, V>> entrySet()
   - <T> T doTask(@Nullable Object key, Task<T> task)
   - Segment getSegmentForHash(int hash)
     {static} int calculateShift(int minimumValue, int maximumValue)
}
class Segment{
   - {final} ReferenceManager referenceManager
   - {final} int initialSize
   - {volatile}  Reference<K, V>[] references
   - {volatile} int count
   + Reference<K, V> getReference(@Nullable Object key, int hash, Restructure restructure)
   + <T> T doTask(final int hash, @Nullable final Object key, final Task<T> task)
   + void clear()
     {final} void restructureIfNecessary(boolean allowResize)
   - Reference<K, V> findInChain(Reference<K, V> ref, @Nullable Object key, int hash)
   - Reference<K, V>[] createReferenceArray(int size)
   - int getIndex(int hash, Reference<K, V>[] references)
   - {final} int getSize()
   - {final} int getCount()
}
class Entry{
    - {final} K key
    - {final,volatile}  V value
    + K getKey()
    + V getValue()
    + V setValue(@Nullable V value)
    + String toString()
    + {final} boolean equals(Object other)
    + {final} int hashCode()
}
class Task<T>{
  -{final} EnumSet<TaskOption> options
  + boolean hasOption(TaskOption option)
    T execute(@Nullable Reference<K, V> ref, @Nullable Entry<K, V> entry, @Nullable Entries entries)
    T execute(@Nullable Reference<K, V> ref, @Nullable Entry<K, V> entry)
}
interface Reference{
    Entry<K, V> get()
    int getHash()
    Reference<K, V> getNext()
    void release()
}
class EntrySet{
  + Iterator<Map.Entry<K, V>> iterator()
  + boolean contains(@Nullable Object o)
  + boolean remove(Object o)
  + int size()
  + void clear()
}
class EntryIterator{
    - int segmentIndex
    - int referenceIndex
    - Reference<K, V>[] references
    - Reference<K, V> reference
    - Entry<K, V> next
    - Entry<K, V> last
    + boolean hasNext()
    + Entry<K, V> next()
    - void getNextIfNecessary()
    - void moveToNextReference()
    - void moveToNextSegment(
    + void remove()
}
class ReferenceManager{
    - {final} ReferenceQueue<Entry<K, V>> queue
    - Reference<K, V> createReference(Entry<K, V> entry, int hash, @Nullable Reference<K, V> next)
    + Reference<K, V> pollForPurge()
}
class SoftEntryReference{
    - {final} int hash
    - {final} Reference<K, V> nextReference
    + int getHash()
    + Reference<K, V> getNext()
    + void release()
}
class WeakEntryReference{
    - {final} int hash
    - {final} Reference<K, V> nextReference
    + int getHash()
    + Reference<K, V> getNext()
    + void release()
}
class AutowireUtils{
    - {final} Comparator<Executable> EXECUTABLE_COMPARATOR
    + {static} void sortConstructors(Constructor<?>[] constructors)
    + {static} void sortFactoryMethods(Method[] factoryMethods)
    + {static} boolean isExcludedFromDependencyCheck(PropertyDescriptor pd)
    + {static} boolean isSetterDefinedInInterface(PropertyDescriptor pd, Set<Class<?>> interfaces)
    + {static} Object resolveAutowiringValue(Object autowiringValue, Class<?> requiredType)
    + {static} Class<?> resolveReturnTypeForFactoryMethod( Method method, Object[] args, @Nullable ClassLoader classLoader)
}
class ObjectFactoryDelegatingInvocationHandler{
    - {final} ObjectFactory<?> objectFactory
    + Object invoke(Object proxy, Method method, Object[] args) throws Throwable
}
class BeanUtils{
    + {final} Set<Class<?>> unknownEditorTypes
    + <T> T instantiate(Class<T> clazz) throws BeanInstantiationException
    + <T> T instantiateClass(Class<T> clazz) throws BeanInstantiationException
    + <T> T instantiateClass(Class<?> clazz, Class<T> assignableTo) throws BeanInstantiationException
    + <T> T instantiateClass(Constructor<T> ctor, Object... args) throws BeanInstantiationException
    + <T> Constructor<T> findPrimaryConstructor(Class<T> clazz)
    + Method findMethod(Class<?> clazz, String methodName, Class<?>... paramTypes)
    + Method findDeclaredMethod(Class<?> clazz, String methodName, Class<?>... paramTypes)
    + Method findMethodWithMinimalParameters(Class<?> clazz, String methodName)
    + Method findDeclaredMethodWithMinimalParameters(Class<?> clazz, String methodName) throws IllegalArgumentException
    + Method findMethodWithMinimalParameters(Method[] methods, String methodName) throws IllegalArgumentException
    + Method resolveSignature(String signature, Class<?> clazz)
    + PropertyDescriptor[] getPropertyDescriptors(Class<?> clazz) throws BeansException
    + PropertyDescriptor getPropertyDescriptor(Class<?> clazz, String propertyName) throws BeansException
    + PropertyDescriptor findPropertyForMethod(Method method) throws BeansException
    + PropertyDescriptor findPropertyForMethod(Method method, Class<?> clazz) throws BeansException
    + PropertyEditor findEditorByConvention(@Nullable Class<?> targetType)
    + Class<?> findPropertyType(String propertyName, @Nullable Class<?>... beanClasses)
    + MethodParameter getWriteMethodParameter(PropertyDescriptor pd)
    + boolean isSimpleProperty(Class<?> clazz)
    + boolean isSimpleValueType(Class<?> clazz)
    + void copyProperties(Object source, Object target) throws BeansException
    + void copyProperties(Object source, Object target, Class<?> editable) throws BeansException
    + void copyProperties(Object source, Object target, String... ignoreProperties) throws BeansException
    + void copyProperties(Object source, Object target, @Nullable Class<?> editable, @Nullable String... ignoreProperties) throws BeansException
}
abstract class  WebApplicationContextUtils{
    - {static,final} boolean jsfPresent
    + WebApplicationContext getRequiredWebApplicationContext(ServletContext sc) throws IllegalStateException
    + WebApplicationContext getWebApplicationContext(ServletContext sc)
    + WebApplicationContext getWebApplicationContext(ServletContext sc, String attrName)
    + WebApplicationContext findWebApplicationContext(ServletContext sc)
    + void registerWebApplicationScopes(ConfigurableListableBeanFactory beanFactory)
    + void registerWebApplicationScopes(ConfigurableListableBeanFactory beanFactory, @Nullable ServletContext sc)
    + void registerEnvironmentBeans(ConfigurableListableBeanFactory bf, @Nullable ServletContext sc)
    + registerEnvironmentBeans(ConfigurableListableBeanFactory bf,@Nullable ServletContext servletContext, @Nullable ServletConfig servletConfig)
    + void initServletPropertySources(MutablePropertySources propertySources, ServletContext servletContext)
    + void initServletPropertySources(MutablePropertySources sources, @Nullable ServletContext servletContext, @Nullable ServletConfig servletConfig)
      ServletRequestAttributes currentRequestAttributes()
}
abstract class UiApplicationContextUtils{
    + {static,final} String THEME_SOURCE_BEAN_NAME
    + {static} ThemeSource initThemeSource(ApplicationContext context)
}
ConcurrentReferenceHashMap <..o Segment
ConcurrentReferenceHashMap <..o ReferenceManager
ConcurrentReferenceHashMap <..o Reference
ConcurrentReferenceHashMap <..o Task
Segment --|>ReentrantLock
Segment <..o ReferenceManager
Segment <..o Reference
Segment <..o Task
EntrySet <..o EntryIterator
ReferenceManager <--o SoftEntryReference
ReferenceManager <--o WeakEntryReference
AutowireUtils <--o ObjectFactoryDelegatingInvocationHandler
@enduml