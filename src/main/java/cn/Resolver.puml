@startuml

class StringValueResolver{

}
class GenericTypeResolver{
    - {static,final} Map<Class<?>, Map<TypeVariable, Type>> typeVariableCache
    + resolveParameterType(MethodParameter methodParameter, Class<?> implementationClass)
    + Class<?> resolveReturnType(Method method, Class<?> clazz)
    + Class<?> resolveReturnTypeArgument(Method method, Class<?> genericIfc)
    + Class<?> resolveTypeArgument(Class<?> clazz, Class<?> genericIfc)
    + Class<?> getSingleGeneric(ResolvableType resolvableType)
    + Class<?>[] resolveTypeArguments(Class<?> clazz, Class<?> genericIfc)
    + Type resolveType(Type genericType, @Nullable Class<?> contextClass)
    - ResolvableType resolveVariable(TypeVariable<?> typeVariable, ResolvableType contextType)
    + Class<?> resolveType(Type genericType, Map<TypeVariable, Type> map)
    + Map<TypeVariable, Type> getTypeVariableMap(Class<?> clazz)
    + void buildTypeVariableMap(ResolvableType type, Map<TypeVariable, Type> typeVariableMap)
}
class ConstructorResolver{
    -{static,final} Object[] EMPTY_ARGS
    -{static,final} NamedThreadLocal<InjectionPoint> currentInjectionPoint
    -{final}  AbstractAutowireCapableBeanFactory beanFactory
    + BeanWrapper autowireConstructor(String beanName, RootBeanDefinition mbd,@Nullable Constructor<?>[] chosenCtors, @Nullable Object[] explicitArgs)
    - Object instantiate(String beanName, RootBeanDefinition mbd, Constructor constructorToUse, Object[] argsToUse)
    + void resolveFactoryMethodIfPossible(RootBeanDefinition mbd)
    - Method[] getCandidateMethods(Class<?> factoryClass, RootBeanDefinition mbd)
    +  BeanWrapper instantiateUsingFactoryMethod(String beanName, RootBeanDefinition mbd, @Nullable Object[] explicitArgs)
    - Object instantiate(String beanName, RootBeanDefinition mbd,@Nullable Object factoryBean, Method factoryMethod, Object[] args)
    - int resolveConstructorArguments(String beanName, RootBeanDefinition mbd, BeanWrapper bw,ConstructorArgumentValues cargs, ConstructorArgumentValues resolvedValues)
    - ArgumentsHolder createArgumentArray(String beanName, RootBeanDefinition mbd, @Nullable ConstructorArgumentValues resolvedValues,BeanWrapper bw, Class<?>[] paramTypes, @Nullable String[] paramNames, Executable executable,boolean autowiring, boolean fallback) throws UnsatisfiedDependencyException
    - Object[] resolvePreparedArguments(String beanName, RootBeanDefinition mbd, BeanWrapper bw,Executable executable, Object[] argsToResolve, boolean fallback)
      Constructor<?> getUserDeclaredConstructor(Constructor<?> constructor)
      Object resolveAutowiredArgument(MethodParameter param, String beanName,@Nullable Set<String> autowiredBeanNames, TypeConverter typeConverter, boolean fallback)
    + static InjectionPoint setCurrentInjectionPoint(@Nullable InjectionPoint injectionPoint)
}
class ArgumentsHolder{
  + {final} Object[] rawArguments
  + {final} Object[] arguments
  + {final} Object[] preparedArguments
  + boolean resolveNecessary
  + int getTypeDifferenceWeight(Class<?>[] paramTypes)
  + int getAssignabilityWeight(Class<?>[] paramTypes)
  + void storeCache(RootBeanDefinition mbd, Executable constructorOrFactoryMethod)
}
class ConstructorPropertiesChecker{
   +{static} String[] evaluate(Constructor<?> candidate, int paramCount)
}

class PathMatchingResourcePatternResolver{
    -{final} ResourceLoader resourceLoader
    - PathMatcher pathMatcher
    + ResourceLoader getResourceLoader()
    + ClassLoader getClassLoader()
    + setPathMatcher(PathMatcher pathMatcher)
    + PathMatcher getPathMatcher()
    + Resource getResource(String location)
    + Resource[] getResources(String locationPattern) throws IOException
      Resource[] findAllClassPathResources(String location) throws IOException
      Set<Resource> doFindAllClassPathResources(String path) throws IOException
      Resource convertClassLoaderURL(URL url)
      void addAllClassLoaderJarRoots(@Nullable ClassLoader classLoader, Set<Resource> result)
      void addClassPathManifestEntries(Set<Resource> result)
      Resource[] findPathMatchingResources(String locationPattern) throws IOException
      String determineRootDir(String location)
      Resource resolveRootDirResource(Resource original) throws IOException
      boolean isJarResource(Resource resource) throws IOException
      Set<Resource> doFindPathMatchingJarResources(Resource rootDirResource, URL rootDirURL, String subPattern)throws IOException
      JarFile getJarFile(String jarFileUrl) throws IOException
      Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource, String subPattern)throws IOException
      Set<Resource> doFindMatchingFileSystemResources(File rootDir, String subPattern) throws IOException
      Set<File> retrieveMatchingFiles(File rootDir, String pattern) throws IOException
      void doRetrieveMatchingFiles(String fullPattern, File dir, Set<File> result) throws IOException
      File[] listDirectory(File dir)
    - boolean hasDuplicate(String filePath, Set<Resource> result)
}
class AntPathMatcher{

}
class StandardBeanExpressionResolver{
  +{static,final}  String DEFAULT_EXPRESSION_PREFIX
  +{static,final}  String DEFAULT_EXPRESSION_SUFFIX
  - String expressionPrefix
  - String expressionSuffix
  - ExpressionParser expressionParser
  - {final} Map<String, Expression> expressionCache
  - {final} Map<BeanExpressionContext, StandardEvaluationContext> evaluationCache
  - {final} ParserContext beanExpressionParserContext
  + void setExpressionPrefix(String expressionPrefix)
  + void setExpressionSuffix(String expressionSuffix)
  + void setExpressionParser(ExpressionParser expressionParser)
  + Object evaluate(@Nullable String value, BeanExpressionContext evalContext) throws BeansException
  + void customizeEvaluationContext(StandardEvaluationContext evalContext)
}
interface BeanExpressionResolver{
  Object evaluate(@Nullable String value, BeanExpressionContext evalContext) throws BeansException
}
interface ResourcePatternResolver{
   String CLASSPATH_ALL_URL_PREFIX
   Resource[] getResources(String locationPattern) throws IOException
}
interface PathMatcher{
    boolean isPattern(String path)
    boolean match(String pattern, String path
    boolean matchStart(String pattern, String path)
    String extractPathWithinPattern(String pattern, String path)
    Map<String, String> extractUriTemplateVariables(String pattern, String path)
    Comparator<String> getPatternComparator(String path)
    String combine(String pattern1, String pattern2)
}
class SimpleAutowireCandidateResolver{
    boolean isAutowireCandidate(BeanDefinitionHolder bdHolder, DependencyDescriptor descriptor)
    boolean isRequired(DependencyDescriptor descriptor)
    Object getSuggestedValue(DependencyDescriptor descriptor)
    Object getLazyResolutionProxyIfNecessary(DependencyDescriptor descriptor, @Nullable String beanName)
}
interface AutowireCandidateResolver{
    boolean isAutowireCandidate(BeanDefinitionHolder bdHolder, DependencyDescriptor descriptor)
    boolean isRequired(DependencyDescriptor descriptor)
    boolean hasQualifier(DependencyDescriptor descriptor)
    Object getSuggestedValue(DependencyDescriptor descriptor)
    Object getLazyResolutionProxyIfNecessary(DependencyDescriptor descriptor, @Nullable String beanName)
}
PathMatchingResourcePatternResolver <..o ResourceLoader
PathMatchingResourcePatternResolver <..o PathMatcher
PathMatchingResourcePatternResolver <..o File
PathMatchingResourcePatternResolver <..o URL
PathMatchingResourcePatternResolver <..o JarFile
AntPathMatcher ..|>PathMatcher
StandardBeanExpressionResolver ..|>BeanExpressionResolver
SimpleAutowireCandidateResolver ..|>AutowireCandidateResolver
ConstructorResolver <..o AbstractAutowireCapableBeanFactory
ConstructorResolver <..o RootBeanDefinition
ConstructorResolver <..o ConstructorArgumentValues
ConstructorResolver <..o ArgumentsHolder
ConstructorResolver <..o BeanWrapper
ConstructorResolver <..o InstantiationStrategy
ConstructorResolver <..o ReflectionUtils
ConstructorResolver <..o TypeConverter
ConstructorResolver <..o MethodParameter
ConstructorResolver <..o GenericTypeResolver
ArgumentsHolder <..o ClassUtils
ArgumentsHolder <..o MethodInvoker
@enduml