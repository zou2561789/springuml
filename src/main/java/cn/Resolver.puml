@startuml

class StringValueResolver{

}
class PathMatchingResourcePatternResolver{
    -{final} ResourceLoader resourceLoader
    - PathMatcher pathMatcher
    + ResourceLoader getResourceLoader()
    + ClassLoader getClassLoader()
    + setPathMatcher(PathMatcher pathMatcher)
    + PathMatcher getPathMatcher()
    + Resource getResource(String location)
    + Resource[] getResources(String locationPattern) throws IOException
      Resource[] findAllClassPathResources(String location) throws IOException
      Set<Resource> doFindAllClassPathResources(String path) throws IOException
      Resource convertClassLoaderURL(URL url)
      void addAllClassLoaderJarRoots(@Nullable ClassLoader classLoader, Set<Resource> result)
      void addClassPathManifestEntries(Set<Resource> result)
      Resource[] findPathMatchingResources(String locationPattern) throws IOException
      String determineRootDir(String location)
      Resource resolveRootDirResource(Resource original) throws IOException
      boolean isJarResource(Resource resource) throws IOException
      Set<Resource> doFindPathMatchingJarResources(Resource rootDirResource, URL rootDirURL, String subPattern)throws IOException
      JarFile getJarFile(String jarFileUrl) throws IOException
      Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource, String subPattern)throws IOException
      Set<Resource> doFindMatchingFileSystemResources(File rootDir, String subPattern) throws IOException
      Set<File> retrieveMatchingFiles(File rootDir, String pattern) throws IOException
      void doRetrieveMatchingFiles(String fullPattern, File dir, Set<File> result) throws IOException
      File[] listDirectory(File dir)
    - boolean hasDuplicate(String filePath, Set<Resource> result)
}
class AntPathMatcher{

}
class StandardBeanExpressionResolver{
  +{static,final}  String DEFAULT_EXPRESSION_PREFIX
  +{static,final}  String DEFAULT_EXPRESSION_SUFFIX
  - String expressionPrefix
  - String expressionSuffix
  - ExpressionParser expressionParser
  - {final} Map<String, Expression> expressionCache
  - {final} Map<BeanExpressionContext, StandardEvaluationContext> evaluationCache
  - {final} ParserContext beanExpressionParserContext
  + void setExpressionPrefix(String expressionPrefix)
  + void setExpressionSuffix(String expressionSuffix)
  + void setExpressionParser(ExpressionParser expressionParser)
  + Object evaluate(@Nullable String value, BeanExpressionContext evalContext) throws BeansException
  + void customizeEvaluationContext(StandardEvaluationContext evalContext)
}
interface BeanExpressionResolver{
  Object evaluate(@Nullable String value, BeanExpressionContext evalContext) throws BeansException
}
interface ResourcePatternResolver{
   String CLASSPATH_ALL_URL_PREFIX
   Resource[] getResources(String locationPattern) throws IOException
}
interface PathMatcher{
    boolean isPattern(String path)
    boolean match(String pattern, String path
    boolean matchStart(String pattern, String path)
    String extractPathWithinPattern(String pattern, String path)
    Map<String, String> extractUriTemplateVariables(String pattern, String path)
    Comparator<String> getPatternComparator(String path)
    String combine(String pattern1, String pattern2)
}
PathMatchingResourcePatternResolver <..o ResourceLoader
PathMatchingResourcePatternResolver <..o PathMatcher
PathMatchingResourcePatternResolver <..o File
PathMatchingResourcePatternResolver <..o URL
PathMatchingResourcePatternResolver <..o JarFile
AntPathMatcher ..|>PathMatcher
StandardBeanExpressionResolver ..|>BeanExpressionResolver
@enduml