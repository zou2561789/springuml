@startuml

abstract class  BeanFactoryUtils{
 }
class AnnotationConfigServletWebServerApplicationContext{
}
class ServletWebServerApplicationContext{
}
class GenericWebApplicationContext{
}
class GenericApplicationContext{
    -{final} DefaultListableBeanFactory beanFactory
    - ResourceLoader resourceLoader
    - boolean customClassLoader
    + void setParent(@Nullable ApplicationContext parent)
    + void setAllowBeanDefinitionOverriding(boolean allowBeanDefinitionOverriding)
    + void setAllowCircularReferences(boolean allowCircularReferences)
    + void setResourceLoader(ResourceLoader resourceLoader)
    + Resource getResource(String location)
    + Resource[] getResources(String locationPattern) throws IOException
    + void setClassLoader(@Nullable ClassLoader classLoader)
    + ClassLoader getClassLoader()
    + DefaultListableBeanFactory getDefaultListableBeanFactory()
    + AutowireCapableBeanFactory getAutowireCapableBeanFactory() throws IllegalStateException
    + void registerBeanDefinition(String beanName, BeanDefinition beanDefinition) throws BeanDefinitionStoreException
    + void removeBeanDefinition(String beanName) throws NoSuchBeanDefinitionException
    + BeanDefinition getBeanDefinition(String beanName) throws NoSuchBeanDefinitionException
    + boolean isBeanNameInUse(String beanName)
    + void registerAlias(String beanName, String alias)
    + void removeAlias(String alias)
    + boolean isAlias(String beanName)
    + {final}  <T> void registerBean(Class<T> beanClass, BeanDefinitionCustomizer... customizers)
    + {final}  <T> void registerBean(@Nullable String beanName, Class<T> beanClass, BeanDefinitionCustomizer... customizers)
    + {final}  <T> void registerBean(Class<T> beanClass, Supplier<T> supplier, BeanDefinitionCustomizer... customizers)
      void registerBean(@Nullable String beanName, Class<T> beanClass,@Nullable Supplier<T> supplier, BeanDefinitionCustomizer... customizers)
      {final} void refreshBeanFactory() throws IllegalStateException
      {final} void closeBeanFactory()
      {final} ConfigurableListableBeanFactory getBeanFactory()
      void cancelRefresh(BeansException ex)
}
abstract class AbstractApplicationContext{
   + {static,final} String MESSAGE_SOURCE_BEAN_NAME
   + {static,final} String LIFECYCLE_PROCESSOR_BEAN_NAME
   + {static,final} String APPLICATION_EVENT_MULTICASTER_BEAN_NAME
   - {final}  AtomicBoolean active
   - {final}  AtomicBoolean closed
   - {final}  Object startupShutdownMonitor
   - {final}  Thread shutdownHook
   - {final} Set<ApplicationListener<?>> applicationListeners
   - {final} List<BeanFactoryPostProcessor> beanFactoryPostProcessors
   - {final}  LifecycleProcessor lifecycleProcessor
   - String id
   - String displayName
   - ApplicationContext parent
   - ConfigurableEnvironment environment
   - long startupDate
   - ResourcePatternResolver resourcePatternResolver
   - MessageSource messageSource
   - ApplicationEventMulticaster applicationEventMulticaster
   - Set<ApplicationListener<?>> earlyApplicationListeners
   - Set<ApplicationEvent> earlyApplicationEvents
   //Implementation of ApplicationContext interface
   + void setId(String id)
   + String getId()
   + String getApplicationName()
   + void setDisplayName(String displayName)
   + String getDisplayName()
   + ApplicationContext getParent()
   + void setEnvironment(ConfigurableEnvironment environment)
   + ConfigurableEnvironment getEnvironment()
    ConfigurableEnvironment createEnvironment()
   + AutowireCapableBeanFactory getAutowireCapableBeanFactory()
   + long getStartupDate()
   + void publishEvent(ApplicationEvent event)
   + void publishEvent(Object event)
     void publishEvent(Object event, @Nullable ResolvableType eventType)
     ApplicationEventMulticaster getApplicationEventMulticaster() throws IllegalStateException
     LifecycleProcessor getLifecycleProcessor() throws IllegalStateException
     ResourcePatternResolver getResourcePatternResolver()
   //Implementation of ConfigurableApplicationContext interface
   + void setParent(@Nullable ApplicationContext parent)
   + void addBeanFactoryPostProcessor(BeanFactoryPostProcessor postProcessor)
   + List<BeanFactoryPostProcessor> getBeanFactoryPostProcessors()
   + void addApplicationListener(ApplicationListener<?> listener)
   + Collection<ApplicationListener<?>> getApplicationListeners()
   + void refresh() throws BeansException, IllegalStateException
   + void prepareRefresh()
   + void initPropertySources()
     ConfigurableListableBeanFactory obtainFreshBeanFactory()
     prepareBeanFactory(ConfigurableListableBeanFactory beanFactory)
     postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory)
     invokeBeanFactoryPostProcessors(ConfigurableListableBeanFactory beanFactory)
     registerBeanPostProcessors(ConfigurableListableBeanFactory beanFactory)
     initMessageSource()
     initApplicationEventMulticaster()
     initLifecycleProcessor()
     onRefresh() throws BeansException
     registerListeners()
     finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory)
     finishRefresh()
     void cancelRefresh(BeansException ex)
     void resetCommonCaches()
   + void registerShutdownHook()
   + void destroy()
   + void close()
     void doClose()
     void destroyBeans()
     void onClose()
   + boolean isActive()
     void assertBeanFactoryActive()
   //Implementation of BeanFactory interface
   + Object getBean(String name)
   + <T> T getBean(String name, Class<T> requiredType)
   + <T> T getBean(Class<T> requiredType)
   + <T> T getBean(Class<T> requiredType, Object... args)
   + <T> ObjectProvider<T> getBeanProvider(Class<T> requiredType)
   + <T> ObjectProvider<T> getBeanProvider(ResolvableType requiredType)
   + boolean containsBean(String name)
   + boolean isSingleton(String name) throws NoSuchBeanDefinitionException
   + boolean isPrototype(String name)
   + boolean isTypeMatch(String name, ResolvableType typeToMatch) throws NoSuchBeanDefinitionException
   + boolean isTypeMatch(String name, Class<?> typeToMatch) throws NoSuchBeanDefinitionException
   + Class<?> getType(String name) throws NoSuchBeanDefinitionException
   + String[] getAliases(String name)
   //Implementation of ListableBeanFactory interface
   + boolean containsBeanDefinition(String beanName)
   + int getBeanDefinitionCount()
   + String[] getBeanDefinitionNames()
   + String[] getBeanNamesForType(ResolvableType type)
   + String[] getBeanNamesForType(@Nullable Class<?> type)
   + String[] getBeanNamesForType(@Nullable Class<?> type, boolean includeNonSingletons, boolean allowEagerInit)
   + <T> Map<String, T> getBeansOfType(@Nullable Class<T> type) throws BeansException
   + <T> Map<String, T> getBeansOfType(@Nullable Class<T> type, boolean includeNonSingletons, boolean allowEagerInit)throws BeansException
   + String[] getBeanNamesForAnnotation(Class<? extends Annotation> annotationType)
   + Map<String, Object> getBeansWithAnnotation(Class<? extends Annotation> annotationType) throws BeansException
   + <A extends Annotation> A findAnnotationOnBean(String beanName, Class<A> annotationType) throws NoSuchBeanDefinitionException
   // Implementation of HierarchicalBeanFactory interface
   + BeanFactory getParentBeanFactory()
   + boolean containsLocalBean(String name)
   + BeanFactory getInternalParentBeanFactory()
   // Implementation of MessageSource interface
   + String getMessage(String code, @Nullable Object[] args, @Nullable String defaultMessage, Locale locale)
   + String getMessage(String code, @Nullable Object[] args, Locale locale) throws NoSuchMessageException
   + String getMessage(MessageSourceResolvable resolvable, Locale locale) throws NoSuchMessageException
   - MessageSource getMessageSource() throws IllegalStateException
     MessageSource getInternalParentMessageSource()
     Resource[] getResources(String locationPattern) throws IOException
   +  void start()
   +  void stop()
   +  boolean isRunning()
      abstract void refreshBeanFactory()
      abstract void closeBeanFactory()
      abstract ConfigurableListableBeanFactory getBeanFactory() throws IllegalStateException
   +  String toString()
}
interface AnnotationConfigRegistry{
}
interface ConfigurableWebServerApplicationContext{
}
interface ConfigurableWebApplicationContext{
}
interface ThemeSource{
}
interface BeanDefinitionRegistry{
   void registerBeanDefinition(String beanName, BeanDefinition beanDefinition) throws BeanDefinitionStoreException
   void removeBeanDefinition(String beanName) throws NoSuchBeanDefinitionException
   BeanDefinition getBeanDefinition(String beanName) throws NoSuchBeanDefinitionException
   boolean containsBeanDefinition(String beanName)
   String[] getBeanDefinitionNames()
   int getBeanDefinitionCount()
   boolean isBeanNameInUse(String beanName)
}
interface AliasRegistry{
  void registerAlias(String name, String alias)
  void removeAlias(String alias)
  boolean isAlias(String name)
  String[] getAliases(String name)
}
interface ConfigurableApplicationContext{
    String CONFIG_LOCATION_DELIMITERS
    String CONVERSION_SERVICE_BEAN_NAME
    String LOAD_TIME_WEAVER_BEAN_NAME
    String ENVIRONMENT_BEAN_NAME
    String SYSTEM_PROPERTIES_BEAN_NAME
    String SYSTEM_ENVIRONMENT_BEAN_NAME
    void setId(String id)
    void setParent(@Nullable ApplicationContext parent)
    void setEnvironment(ConfigurableEnvironment environment)
    ConfigurableEnvironment getEnvironment()
    void addBeanFactoryPostProcessor(BeanFactoryPostProcessor postProcessor)
    void addApplicationListener(ApplicationListener<?> listener)
    void addProtocolResolver(ProtocolResolver resolver)
    void refresh() throws BeansException, IllegalStateException
    void registerShutdownHook()
    void close()
    boolean isActive()
    ConfigurableListableBeanFactory getBeanFactory() throws IllegalStateException
}

interface ApplicationContext{
        String getId()
        String getApplicationName()
        String getDisplayName()
        long getStartupDate()
        ApplicationContext getParent()
        AutowireCapableBeanFactory getAutowireCapableBeanFactory() throws IllegalStateException
}
interface BeanFactory{
    String FACTORY_BEAN_PREFIX
    Object getBean(String name) throws BeansException
    <T> T getBean(String name, Class<T> requiredType) throws BeansException
    Object getBean(String name, Object... args) throws BeansException
    <T> T getBean(Class<T> requiredType) throws BeansException
    <T> T getBean(Class<T> requiredType, Object... args) throws BeansException
    <T> ObjectProvider<T> getBeanProvider(Class<T> requiredType)
    <T> ObjectProvider<T> getBeanProvider(ResolvableType requiredType)
    boolean containsBean(String name)
    boolean isSingleton(String name) throws NoSuchBeanDefinitionException
    boolean isPrototype(String name) throws NoSuchBeanDefinitionException
    boolean isTypeMatch(String name, ResolvableType typeToMatch) throws NoSuchBeanDefinitionException
    boolean isTypeMatch(String name, Class<?> typeToMatch) throws NoSuchBeanDefinitionException
    Class<?> getType(String name) throws NoSuchBeanDefinitionException
    String[] getAliases(String name)
}

interface ListableBeanFactory{
        boolean containsBeanDefinition(String beanName)
        int getBeanDefinitionCount()
        String[] getBeanDefinitionNames()
        String[] getBeanNamesForType(ResolvableType type)
        String[] getBeanNamesForType(@Nullable Class<?> type)
        String[] getBeanNamesForType(@Nullable Class<?> type, boolean includeNonSingletons, boolean allowEagerInit)
        <T> Map<String, T> getBeansOfType(@Nullable Class<T> type) throws BeansException
        <T> Map<String, T> getBeansOfType(@Nullable Class<T> type, boolean includeNonSingletons, boolean allowEagerInit) throws BeansException
        String[] getBeanNamesForAnnotation(Class<? extends Annotation> annotationType)
        Map<String, Object> getBeansWithAnnotation(Class<? extends Annotation> annotationType) throws BeansException
        <A extends Annotation> A findAnnotationOnBean(String beanName, Class<A> annotationType) throws NoSuchBeanDefinitionException
}
interface EnvironmentCapable{
   Environment getEnvironment()
}
interface MessageSource{
   String getMessage(String code, Object[] args, String defaultMessage, Locale locale
   String getMessage(String code, Object[] args, Locale locale) throws NoSuchMessageException
   String getMessage(MessageSourceResolvable resolvable, Locale locale) throws NoSuchMessageException
}
interface ApplicationEventPublisher{
   void publishEvent(ApplicationEvent event);
}
interface SmartLifecycle{
}
interface Phased{
}
interface  Lifecycle{
   void start()
   void stop()
   boolean isRunning()
}
interface Closeable{
   close() throws IOException
}


ApplicationContext --|>EnvironmentCapable
ApplicationContext --|>HierarchicalBeanFactory
ApplicationContext --|>ListableBeanFactory
ApplicationContext --|>ApplicationEventPublisher
ApplicationContext --|>ResourcePatternResolver
ApplicationContext --|>MessageSource
BeanDefinitionRegistry --|>AliasRegistry
HierarchicalBeanFactory --|>BeanFactory
ListableBeanFactory --|>BeanFactory
ResourcePatternResolver --|>ResourceLoader
ApplicationContext <..o AutowireCapableBeanFactory
ConfigurableApplicationContext --|>ApplicationContext
ConfigurableApplicationContext --|>Lifecycle
ConfigurableApplicationContext --|>Closeable
SmartLifecycle --|>Lifecycle
SmartLifecycle --|>Phased

AnnotationConfigServletWebServerApplicationContext --|> ServletWebServerApplicationContext
AnnotationConfigServletWebServerApplicationContext ..|> AnnotationConfigRegistry
ServletWebServerApplicationContext --|>GenericWebApplicationContext
ServletWebServerApplicationContext ..|>ConfigurableWebServerApplicationContext
GenericWebApplicationContext --|>GenericApplicationContext
GenericWebApplicationContext ..|>ConfigurableWebApplicationContext
GenericWebApplicationContext ..|>ThemeSource
GenericApplicationContext --|>AbstractApplicationContext
GenericApplicationContext --|>BeanDefinitionRegistry
ConfigurableApplicationContext <..o ConfigurableEnvironment
ConfigurableApplicationContext <..o BeanFactoryPostProcessor
ConfigurableApplicationContext <..o ApplicationListener
ConfigurableApplicationContext <..o ProtocolResolver
ConfigurableApplicationContext <..o ConfigurableListableBeanFactory
ConfigurableListableBeanFactory <..o BeanDefinition
AbstractApplicationContext <..o ApplicationContext
AbstractApplicationContext <..o ConfigurableEnvironment
AbstractApplicationContext <..o BeanFactoryPostProcessor
AbstractApplicationContext <..o MessageSource
AbstractApplicationContext <..o ResourcePatternResolver
AbstractApplicationContext <..o LifecycleProcessor
AbstractApplicationContext <..o ApplicationEventMulticaster
AbstractApplicationContext <..o ApplicationListener
AbstractApplicationContext <..o ApplicationEvent
AbstractApplicationContext <..o ConfigurableListableBeanFactory
AbstractApplicationContext <..o PostProcessorRegistrationDelegate
AbstractApplicationContext <..o ConversionService
AbstractApplicationContext <..o StringValueResolver
BeanDefinitionRegistry <--o AbstractBeanDefinition
BeanDefinitionRegistry <--o RootBeanDefinition
BeanDefinitionRegistry <--o ChildBeanDefinition
BeanDefinitionRegistry <--o BeanDefinition
GenericApplicationContext <--oDefaultListableBeanFactory
GenericApplicationContext <--oResourceLoader

@enduml