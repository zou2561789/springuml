@startuml

abstract class  BeanFactoryUtils{
 }
abstract class AbstractApplicationContext{
   + {static,final} String MESSAGE_SOURCE_BEAN_NAME
   + {static,final} String LIFECYCLE_PROCESSOR_BEAN_NAME
   + {static,final} String APPLICATION_EVENT_MULTICASTER_BEAN_NAME
   - {final}  AtomicBoolean active
   - {final}  AtomicBoolean closed
   - {final}  Object startupShutdownMonitor
   - {final}  Thread shutdownHook
   - {final} Set<ApplicationListener<?>> applicationListeners
   - {final} List<BeanFactoryPostProcessor> beanFactoryPostProcessors
   - {final}  LifecycleProcessor lifecycleProcessor
   - String id
   - String displayName
   - ApplicationContext parent
   - ConfigurableEnvironment environment
   - long startupDate
   - ResourcePatternResolver resourcePatternResolver
   - MessageSource messageSource
   - ApplicationEventMulticaster applicationEventMulticaster
   - Set<ApplicationListener<?>> earlyApplicationListeners
   - Set<ApplicationEvent> earlyApplicationEvents
   //Implementation of ApplicationContext interface
   + void setId(String id)
   + String getId()
   + String getApplicationName()
   + void setDisplayName(String displayName)
   + String getDisplayName()
   + ApplicationContext getParent()
   + void setEnvironment(ConfigurableEnvironment environment)
   + ConfigurableEnvironment getEnvironment()
    ConfigurableEnvironment createEnvironment()
   + AutowireCapableBeanFactory getAutowireCapableBeanFactory()
   + long getStartupDate()
   + void publishEvent(ApplicationEvent event)
   + void publishEvent(Object event)
     void publishEvent(Object event, @Nullable ResolvableType eventType)
     ApplicationEventMulticaster getApplicationEventMulticaster() throws IllegalStateException
     LifecycleProcessor getLifecycleProcessor() throws IllegalStateException
     ResourcePatternResolver getResourcePatternResolver()
   //Implementation of ConfigurableApplicationContext interface
   + void setParent(@Nullable ApplicationContext parent)
   + void addBeanFactoryPostProcessor(BeanFactoryPostProcessor postProcessor)
   + List<BeanFactoryPostProcessor> getBeanFactoryPostProcessors()
   + void addApplicationListener(ApplicationListener<?> listener)
   + Collection<ApplicationListener<?>> getApplicationListeners()
   + void refresh() throws BeansException, IllegalStateException
   + void prepareRefresh()
   + void initPropertySources()
     ConfigurableListableBeanFactory obtainFreshBeanFactory()
     prepareBeanFactory(ConfigurableListableBeanFactory beanFactory)
     postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory)
     invokeBeanFactoryPostProcessors(ConfigurableListableBeanFactory beanFactory)
     registerBeanPostProcessors(ConfigurableListableBeanFactory beanFactory)
     initMessageSource()
     initApplicationEventMulticaster()
     initLifecycleProcessor()
     onRefresh() throws BeansException
     registerListeners()
     finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory)
     finishRefresh()
     void cancelRefresh(BeansException ex)
     void resetCommonCaches()
   + void registerShutdownHook()
   + void destroy()
   + void close()
     void doClose()
     void destroyBeans()
     void onClose()
   + boolean isActive()
     void assertBeanFactoryActive()
   //Implementation of BeanFactory interface
   + Object getBean(String name)
   + <T> T getBean(String name, Class<T> requiredType)
   + <T> T getBean(Class<T> requiredType)
   + <T> T getBean(Class<T> requiredType, Object... args)
   + <T> ObjectProvider<T> getBeanProvider(Class<T> requiredType)
   + <T> ObjectProvider<T> getBeanProvider(ResolvableType requiredType)
   + boolean containsBean(String name)
   + boolean isSingleton(String name) throws NoSuchBeanDefinitionException
   + boolean isPrototype(String name)
   + boolean isTypeMatch(String name, ResolvableType typeToMatch) throws NoSuchBeanDefinitionException
   + boolean isTypeMatch(String name, Class<?> typeToMatch) throws NoSuchBeanDefinitionException
   + Class<?> getType(String name) throws NoSuchBeanDefinitionException
   + String[] getAliases(String name)
   //Implementation of ListableBeanFactory interface
   + boolean containsBeanDefinition(String beanName)
   + int getBeanDefinitionCount()
   + String[] getBeanDefinitionNames()
   + String[] getBeanNamesForType(ResolvableType type)
   + String[] getBeanNamesForType(@Nullable Class<?> type)
   + String[] getBeanNamesForType(@Nullable Class<?> type, boolean includeNonSingletons, boolean allowEagerInit)
   + <T> Map<String, T> getBeansOfType(@Nullable Class<T> type) throws BeansException
   + <T> Map<String, T> getBeansOfType(@Nullable Class<T> type, boolean includeNonSingletons, boolean allowEagerInit)throws BeansException
   + String[] getBeanNamesForAnnotation(Class<? extends Annotation> annotationType)
   + Map<String, Object> getBeansWithAnnotation(Class<? extends Annotation> annotationType) throws BeansException
   + <A extends Annotation> A findAnnotationOnBean(String beanName, Class<A> annotationType) throws NoSuchBeanDefinitionException
   // Implementation of HierarchicalBeanFactory interface
   + BeanFactory getParentBeanFactory()
   + boolean containsLocalBean(String name)
   + BeanFactory getInternalParentBeanFactory()
   // Implementation of MessageSource interface
   + String getMessage(String code, @Nullable Object[] args, @Nullable String defaultMessage, Locale locale)
   + String getMessage(String code, @Nullable Object[] args, Locale locale) throws NoSuchMessageException
   + String getMessage(MessageSourceResolvable resolvable, Locale locale) throws NoSuchMessageException
   - MessageSource getMessageSource() throws IllegalStateException
     MessageSource getInternalParentMessageSource()
     Resource[] getResources(String locationPattern) throws IOException
   +  void start()
   +  void stop()
   +  boolean isRunning()
      abstract void refreshBeanFactory()
      abstract void closeBeanFactory()
      abstract ConfigurableListableBeanFactory getBeanFactory() throws IllegalStateException
   +   String toString()


}
interface ConfigurableApplicationContext{
    String CONFIG_LOCATION_DELIMITERS
    String CONVERSION_SERVICE_BEAN_NAME
    String LOAD_TIME_WEAVER_BEAN_NAME
    String ENVIRONMENT_BEAN_NAME
    String SYSTEM_PROPERTIES_BEAN_NAME
    String SYSTEM_ENVIRONMENT_BEAN_NAME
    void setId(String id)
    void setParent(@Nullable ApplicationContext parent)
    void setEnvironment(ConfigurableEnvironment environment)
    ConfigurableEnvironment getEnvironment()
    void addBeanFactoryPostProcessor(BeanFactoryPostProcessor postProcessor)
    void addApplicationListener(ApplicationListener<?> listener)
    void addProtocolResolver(ProtocolResolver resolver)
    void refresh() throws BeansException, IllegalStateException
    void registerShutdownHook()
    void close()
    boolean isActive()
    ConfigurableListableBeanFactory getBeanFactory() throws IllegalStateException
}

interface ApplicationContext{
        String getId()
        String getApplicationName()
        String getDisplayName()
        long getStartupDate()
        ApplicationContext getParent()
        AutowireCapableBeanFactory getAutowireCapableBeanFactory() throws IllegalStateException
}
interface BeanFactory{
    String FACTORY_BEAN_PREFIX
    Object getBean(String name) throws BeansException
    <T> T getBean(String name, Class<T> requiredType) throws BeansException
    Object getBean(String name, Object... args) throws BeansException
    <T> T getBean(Class<T> requiredType) throws BeansException
    <T> T getBean(Class<T> requiredType, Object... args) throws BeansException
    <T> ObjectProvider<T> getBeanProvider(Class<T> requiredType)
    <T> ObjectProvider<T> getBeanProvider(ResolvableType requiredType)
    boolean containsBean(String name)
    boolean isSingleton(String name) throws NoSuchBeanDefinitionException
    boolean isPrototype(String name) throws NoSuchBeanDefinitionException
    boolean isTypeMatch(String name, ResolvableType typeToMatch) throws NoSuchBeanDefinitionException
    boolean isTypeMatch(String name, Class<?> typeToMatch) throws NoSuchBeanDefinitionException
    Class<?> getType(String name) throws NoSuchBeanDefinitionException
    String[] getAliases(String name)
}
interface HierarchicalBeanFactory{
    BeanFactory getParentBeanFactory()
    boolean containsLocalBean(String name)
}
interface ConfigurableListableBeanFactory{
    void ignoreDependencyType(Class<?> type)
    void ignoreDependencyInterface(Class<?> ifc)
    void registerResolvableDependency(Class<?> dependencyType, @Nullable Object autowiredValue)
    boolean isAutowireCandidate(String beanName, DependencyDescriptor descriptor)throws NoSuchBeanDefinitionException
    BeanDefinition getBeanDefinition(String beanName) throws NoSuchBeanDefinitionException
    Iterator<String> getBeanNamesIterator()
    void clearMetadataCache()
    void freezeConfiguration()
    boolean isConfigurationFrozen()
    void preInstantiateSingletons() throws BeansException
}
interface ConfigurableBeanFactory{
    String SCOPE_SINGLETON
    String SCOPE_PROTOTYPE
    void setParentBeanFactory(BeanFactory parentBeanFactory) throws IllegalStateException
    void setBeanClassLoader(@Nullable ClassLoader beanClassLoader)
    ClassLoader getBeanClassLoader()
    void setTempClassLoader(@Nullable ClassLoader tempClassLoader)
    ClassLoader getTempClassLoader()
    void setCacheBeanMetadata(boolean cacheBeanMetadata)
    boolean isCacheBeanMetadata()
    void setBeanExpressionResolver(@Nullable BeanExpressionResolver resolver)
    BeanExpressionResolver getBeanExpressionResolver()
    void setConversionService(@Nullable ConversionService conversionService)
    ConversionService getConversionService()
    void addPropertyEditorRegistrar(PropertyEditorRegistrar registrar)
    void registerCustomEditor(Class<?> requiredType, Class<? extends PropertyEditor> propertyEditorClass)
    void copyRegisteredEditorsTo(PropertyEditorRegistry registry)
    void setTypeConverter(TypeConverter typeConverter)
    TypeConverter getTypeConverter()
    void addEmbeddedValueResolver(StringValueResolver valueResolver)
    boolean hasEmbeddedValueResolver()
    String resolveEmbeddedValue(String value)
    void addBeanPostProcessor(BeanPostProcessor beanPostProcessor)
    int getBeanPostProcessorCount()
    void registerScope(String scopeName, Scope scope)
    String[] getRegisteredScopeNames()
    Scope getRegisteredScope(String scopeName)
    void copyConfigurationFrom(ConfigurableBeanFactory otherFactory)
    void registerAlias(String beanName, String alias) throws BeanDefinitionStoreException
    void resolveAliases(StringValueResolver valueResolver)
    BeanDefinition getMergedBeanDefinition(String beanName) throws NoSuchBeanDefinitionException
    boolean isFactoryBean(String name) throws NoSuchBeanDefinitionException
    void setCurrentlyInCreation(String beanName, boolean inCreation)
    boolean isCurrentlyInCreation(String beanName)
    void registerDependentBean(String beanName, String dependentBeanName)
    String[] getDependentBeans(String beanName)
    String[] getDependenciesForBean(String beanName)
    void destroyBean(String beanName, Object beanInstance)
    void destroyScopedBean(String beanName)
    void destroySingletons()
}
interface SingletonBeanRegistry{
    void registerSingleton(String beanName, Object singletonObject)
    Object getSingleton(String beanName)
    boolean containsSingleton(String beanName)
    String[] getSingletonNames()
    int getSingletonCount()
    Object getSingletonMutex()
}
interface ListableBeanFactory{
        boolean containsBeanDefinition(String beanName)
        int getBeanDefinitionCount()
        String[] getBeanDefinitionNames()
        String[] getBeanNamesForType(ResolvableType type)
        String[] getBeanNamesForType(@Nullable Class<?> type)
        String[] getBeanNamesForType(@Nullable Class<?> type, boolean includeNonSingletons, boolean allowEagerInit)
        <T> Map<String, T> getBeansOfType(@Nullable Class<T> type) throws BeansException
        <T> Map<String, T> getBeansOfType(@Nullable Class<T> type, boolean includeNonSingletons, boolean allowEagerInit) throws BeansException
        String[] getBeanNamesForAnnotation(Class<? extends Annotation> annotationType)
        Map<String, Object> getBeansWithAnnotation(Class<? extends Annotation> annotationType) throws BeansException
        <A extends Annotation> A findAnnotationOnBean(String beanName, Class<A> annotationType) throws NoSuchBeanDefinitionException
}
interface EnvironmentCapable{
   Environment getEnvironment()
}
interface MessageSource{
   String getMessage(String code, Object[] args, String defaultMessage, Locale locale
   String getMessage(String code, Object[] args, Locale locale) throws NoSuchMessageException
   String getMessage(MessageSourceResolvable resolvable, Locale locale) throws NoSuchMessageException
}
interface ApplicationEventPublisher{
   void publishEvent(ApplicationEvent event);
}
interface ResourcePatternResolver{
   String CLASSPATH_ALL_URL_PREFIX
   Resource[] getResources(String locationPattern) throws IOExceptio
}
interface SmartLifecycle{
}
interface Phased{
}
interface  Lifecycle{
   void start()
   void stop()
   boolean isRunning()
}
interface Closeable{
   close() throws IOException
}

interface AutowireCapableBeanFactory{
   int AUTOWIRE_NO
   int AUTOWIRE_BY_NAME
   int AUTOWIRE_BY_TYPE
   int AUTOWIRE_CONSTRUCTOR
   int AUTOWIRE_AUTODETECT
   String ORIGINAL_INSTANCE_SUFFIX
   //Typical methods for creating and populating external bean instances
   <T> T createBean(Class<T> beanClass) throws BeansException
   void autowireBean(Object existingBean) throws BeansException
   Object configureBean(Object existingBean, String beanName) throws BeansException
   //Specialized methods for fine-grained control over the bean lifecycle
   Object createBean(Class<?> beanClass, int autowireMode, boolean dependencyCheck) throws BeansException
   Object autowire(Class<?> beanClass, int autowireMode, boolean dependencyCheck) throws BeansException
   void autowireBeanProperties(Object existingBean, int autowireMode, boolean dependencyCheck)throws BeansException
   void applyBeanPropertyValues(Object existingBean, String beanName) throws BeansException
   Object initializeBean(Object existingBean, String beanName) throws BeansException
   Object applyBeanPostProcessorsBeforeInitialization(Object existingBean, String beanName)throws BeansException
   Object applyBeanPostProcessorsAfterInitialization(Object existingBean, String beanName)throws BeansException
   void destroyBean(Object existingBean)
   //Delegate methods for resolving injection points
   <T> NamedBeanHolder<T> resolveNamedBean(Class<T> requiredType) throws BeansException
   Object resolveBeanByName(String name, DependencyDescriptor descriptor) throws BeansException
   Object resolveDependency(DependencyDescriptor descriptor, @Nullable String requestingBeanName) throws BeansException
   Object resolveDependency(DependencyDescriptor descriptor, @Nullable String requestingBeanName,@Nullable Set<String> autowiredBeanNames, @Nullable TypeConverter typeConverter) throws BeansException
}
ApplicationContext --|>EnvironmentCapable
ApplicationContext --|>HierarchicalBeanFactory
ApplicationContext --|>ListableBeanFactory
ApplicationContext --|>ApplicationEventPublisher
ApplicationContext --|>ResourcePatternResolver
ApplicationContext --|>MessageSource
HierarchicalBeanFactory --|>BeanFactory
ListableBeanFactory --|>BeanFactory
ResourcePatternResolver --|>ResourceLoader
AutowireCapableBeanFactory --|>BeanFactory
ApplicationContext <..o AutowireCapableBeanFactory
ConfigurableApplicationContext --|>ApplicationContext
ConfigurableApplicationContext --|>Lifecycle
ConfigurableApplicationContext --|>Closeable
SmartLifecycle --|>Lifecycle
SmartLifecycle --|>Phased
ConfigurableListableBeanFactory --|>ConfigurableBeanFactory
ConfigurableBeanFactory --|>HierarchicalBeanFactory
ConfigurableBeanFactory --|> SingletonBeanRegistry
ConfigurableApplicationContext <..o ConfigurableEnvironment
ConfigurableApplicationContext <..o BeanFactoryPostProcessor
ConfigurableApplicationContext <..o ApplicationListener
ConfigurableApplicationContext <..o ProtocolResolver
ConfigurableApplicationContext <..o ConfigurableListableBeanFactory
ConfigurableBeanFactory <..o ClassLoader
ConfigurableBeanFactory <..o BeanExpressionResolver
ConfigurableBeanFactory <..o ConversionService
ConfigurableBeanFactory <..o PropertyEditorRegistrar
ConfigurableBeanFactory <..o PropertyEditor
ConfigurableBeanFactory <..o PropertyEditorRegistry
ConfigurableBeanFactory <..o TypeConverter
ConfigurableBeanFactory <..o StringValueResolver
ConfigurableBeanFactory <..o BeanPostProcessor
ConfigurableBeanFactory <..o Scope
ConfigurableBeanFactory <..o AccessControlContext
ConfigurableBeanFactory <..o BeanDefinition
ConfigurableListableBeanFactory <..o BeanDefinition
AbstractApplicationContext <..o ApplicationContext
AbstractApplicationContext <..o ConfigurableEnvironment

@enduml